{
	"info": {
		"_postman_id": "066e27e6-4f7b-4d77-9821-ea9b99896611",
		"name": "POSTMAN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6834280"
	},
	"item": [
		{
			"name": "01_CALCULATOR",
			"item": [
				{
					"name": "Test Case 6.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"First possitive test case\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let calc = pm.response.json();\r",
									"    console.log('ANGIE RESPONSE: ', calc);\r",
									"    let totalExpected = calc.num1 + calc.num2;\r",
									"    let totalReceived = calc.total;\r",
									"    console.log(`totalExpected: ${totalExpected}, totalReceived: ${totalReceived}`, calc);\r",
									"\r",
									"    // TEST CASE\r",
									"    pm.expect(totalExpected).eq(totalReceived);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/?num1=5&num2=20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								""
							],
							"query": [
								{
									"key": "num1",
									"value": "5"
								},
								{
									"key": "num2",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Case 6.2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 6.2\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    let calc = pm.response.json();\r",
									"    pm.expect(calc.error).eq(\"num1 or num2 not in valid range\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/?num1=-2000&num2=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								""
							],
							"query": [
								{
									"key": "num1",
									"value": "-2000"
								},
								{
									"key": "num2",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Case 6.3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 6.3\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"\r",
									"    let calc = pm.response.json();\r",
									"    pm.expect(calc.error).eq(\"num1 or num2 is not provided\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/?num2=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								""
							],
							"query": [
								{
									"key": "num2",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Case 6.4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 6.4\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"\r",
									"    let calc = pm.response.json();\r",
									"    pm.expect(calc.error).eq(\"num1 or num2 is not of type integer\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/?num1=ertyrtyrty&num2=20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								""
							],
							"query": [
								{
									"key": "num1",
									"value": "ertyrtyrty"
								},
								{
									"key": "num2",
									"value": "20"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "02_calculator_post",
			"item": []
		},
		{
			"name": "03_calculator_json",
			"item": []
		},
		{
			"name": "04_weather",
			"item": [
				{
					"name": "Test Case 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 1\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"    // console.log(obj.result);\r",
									"    \r",
									"    pm.expect(obj.result)\r",
									"        .to.be.an('array')\r",
									"        .but.not.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Angie",
									"type": "text"
								},
								{
									"key": "surname",
									"value": "Neophytou333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": [
						{
							"name": "Test Case 1",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Angie",
											"type": "text"
										},
										{
											"key": "surname",
											"value": "Neophytou333",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/weather/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"weather",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Sun, 24 Nov 2024 17:33:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"ChUNKS are logged in console\",\n    \"dataObj\": {\n        \"name\": \"Angie\",\n        \"surname\": \"Neophytou333\"\n    },\n    \"result\": [\n        {\n            \"city\": \"Limassol\",\n            \"temperature\": 17,\n            \"humidity\": 86,\n            \"wind_speed\": 6,\n            \"air_quality\": \"fair\",\n            \"icon\": \"sun\"\n        },\n        {\n            \"city\": \"Paphos\",\n            \"temperature\": 20,\n            \"humidity\": 80,\n            \"wind_speed\": 11,\n            \"air_quality\": \"moderate\",\n            \"icon\": \"sun with clouds\"\n        },\n        {\n            \"city\": \"Larnaka\",\n            \"temperature\": 15,\n            \"humidity\": 84,\n            \"wind_speed\": 4,\n            \"air_quality\": \"moderate\",\n            \"icon\": \"sun\"\n        },\n        {\n            \"city\": \"Nicosia\",\n            \"temperature\": -14,\n            \"humidity\": 84,\n            \"wind_speed\": 12,\n            \"air_quality\": \"fair\",\n            \"icon\": \"sun with clouds\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Test Case 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 2\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"    console.log(pm.request.url.query.get('city').toLowerCase());\r",
									"\r",
									"    let expectedCity = pm.request.url.query.get('city').toLowerCase();\r",
									"    let resultCity = obj.result.city.toLowerCase();\r",
									"    \r",
									"    pm.expect(expectedCity).eq(resultCity);\r",
									"    \r",
									"    pm.expect(obj.result)\r",
									"        .to.be.an('object')\r",
									"        .but.not.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Angie",
									"type": "text"
								},
								{
									"key": "surname",
									"value": "Neophytou333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/?city=Limassol",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							],
							"query": [
								{
									"key": "city",
									"value": "Limassol"
								}
							]
						}
					},
					"response": [
						{
							"name": "Test Case 2",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Angie",
											"type": "text"
										},
										{
											"key": "surname",
											"value": "Neophytou333",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/weather/?city=Limassol",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"weather",
										""
									],
									"query": [
										{
											"key": "city",
											"value": "Limassol"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Sun, 24 Nov 2024 17:33:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"ChUNKS are logged in console\",\n    \"dataObj\": {\n        \"name\": \"Angie\",\n        \"surname\": \"Neophytou333\"\n    },\n    \"result\": {\n        \"city\": \"Limassol\",\n        \"temperature\": 17,\n        \"humidity\": 86,\n        \"wind_speed\": 6,\n        \"air_quality\": \"fair\",\n        \"icon\": \"sun\"\n    }\n}"
						}
					]
				},
				{
					"name": "Test Case 3 - Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 3\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"\r",
									"    // pm.expect(false).eq(obj.success);\r",
									"    pm.expect(obj.success).to.be.false;\r",
									"\r",
									"    pm.expect(\"City is not found\").eq(obj.error);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Angie",
									"type": "text"
								},
								{
									"key": "surname",
									"value": "Neophytou333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/?city=Limassol9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							],
							"query": [
								{
									"key": "city",
									"value": "Limassol9"
								}
							]
						}
					},
					"response": [
						{
							"name": "Test Case 3 - Negative",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Angie",
											"type": "text"
										},
										{
											"key": "surname",
											"value": "Neophytou333",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/weather/?city=Limassol9",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"weather",
										""
									],
									"query": [
										{
											"key": "city",
											"value": "Limassol9"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 21:48:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"City is not found\",\n    \"success\": false\n}"
						}
					]
				},
				{
					"name": "Test Case 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 4\", function () {\r",
									" \r",
									"    let obj = pm.response.json();\r",
									"    for (let weather of obj.result) {\r",
									"        pm.expect(weather.temperature).to.match(/^-?\\+?[0-9]+$/);\r",
									"        //https://community.postman.com/t/verify-a-variable-value-is-numeric-the-variable-is-string/53946\r",
									"        // Only for possitive digits. But we have negative aswell.\r",
									"        //pm.expect(weather.temperature).to.match(/^\\d+$/);\r",
									"\r",
									"        //https://stackoverflow.com/questions/66396143/how-to-test-range-age-in-postman\r",
									"        //pm.expect(weather.temperature).to.be.within(-20, 50);\r",
									"\r",
									"        pm.expect(weather.temperature).to.be.greaterThan(-20);\r",
									"        pm.expect(weather.temperature).to.be.lessThan(50);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Angie",
									"type": "text"
								},
								{
									"key": "surname",
									"value": "Neophytou333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": [
						{
							"name": "Test Case 4 response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Angie",
											"type": "text"
										},
										{
											"key": "surname",
											"value": "Neophytou333",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/weather/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"weather",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Sun, 24 Nov 2024 17:29:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"ChUNKS are logged in console\",\n    \"dataObj\": {\n        \"name\": \"Angie\",\n        \"surname\": \"Neophytou333\"\n    },\n    \"result\": [\n        {\n            \"city\": \"Limassol\",\n            \"temperature\": 17,\n            \"humidity\": 86,\n            \"wind_speed\": 6,\n            \"air_quality\": \"fair\",\n            \"icon\": \"sun\"\n        },\n        {\n            \"city\": \"Paphos\",\n            \"temperature\": 20,\n            \"humidity\": 80,\n            \"wind_speed\": 11,\n            \"air_quality\": \"moderate\",\n            \"icon\": \"sun with clouds\"\n        },\n        {\n            \"city\": \"Larnaka\",\n            \"temperature\": 15,\n            \"humidity\": 84,\n            \"wind_speed\": 4,\n            \"air_quality\": \"moderate\",\n            \"icon\": \"sun\"\n        },\n        {\n            \"city\": \"Nicosia\",\n            \"temperature\": -140,\n            \"humidity\": 84,\n            \"wind_speed\": 12,\n            \"air_quality\": \"fair\",\n            \"icon\": \"sun with clouds\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Test Case 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 5\", function () {\r",
									" \r",
									"    let obj = pm.response.json();\r",
									"    for (let object of obj.result) {\r",
									"        pm.expect(object.humidity).to.match(/^-?\\+?[0-9]+$/);\r",
									"        //https://community.postman.com/t/verify-a-variable-value-is-numeric-the-variable-is-string/53946\r",
									"        // Only for possitive digits. But we have negative aswell.\r",
									"        //pm.expect(weather.temperature).to.match(/^\\d+$/);\r",
									"\r",
									"        //https://stackoverflow.com/questions/66396143/how-to-test-range-age-in-postman\r",
									"        //pm.expect(weather.temperature).to.be.within(-20, 50);\r",
									"\r",
									"        pm.expect(object.humidity).to.be.within(1, 100);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Angie",
									"type": "text"
								},
								{
									"key": "surname",
									"value": "Neophytou333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": [
						{
							"name": "Test Case 5 response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Angie",
											"type": "text"
										},
										{
											"key": "surname",
											"value": "Neophytou333",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/weather/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"weather",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 21:26:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"ChUNKS are logged in console\",\n    \"dataObj\": {\n        \"name\": \"Angie\",\n        \"surname\": \"Neophytou333\"\n    },\n    \"result\": [\n        {\n            \"city\": \"Limassol\",\n            \"temperature\": 17,\n            \"humidity\": 86,\n            \"wind_speed\": 6,\n            \"air_quality\": \"fair\",\n            \"icon\": \"sun\"\n        },\n        {\n            \"city\": \"Paphos\",\n            \"temperature\": 20,\n            \"humidity\": 80,\n            \"wind_speed\": 11,\n            \"air_quality\": \"moderate\",\n            \"icon\": \"sun with clouds\"\n        },\n        {\n            \"city\": \"Larnaka\",\n            \"temperature\": 15,\n            \"humidity\": 84,\n            \"wind_speed\": 4,\n            \"air_quality\": \"moderate\",\n            \"icon\": \"sun\"\n        },\n        {\n            \"city\": \"Nicosia\",\n            \"temperature\": -14,\n            \"humidity\": 84,\n            \"wind_speed\": 12,\n            \"air_quality\": \"fair\",\n            \"icon\": \"sun with clouds\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Test Case 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 6\", function () {\r",
									" \r",
									"    let obj = pm.response.json();\r",
									"    for (let object of obj.result) {\r",
									"        pm.expect(object.humidity).to.match(/^-?\\+?[0-9]+$/);\r",
									"        //https://community.postman.com/t/verify-a-variable-value-is-numeric-the-variable-is-string/53946\r",
									"        // Only for possitive digits. But we have negative aswell.\r",
									"        //pm.expect(weather.temperature).to.match(/^\\d+$/);\r",
									"\r",
									"        //https://stackoverflow.com/questions/66396143/how-to-test-range-age-in-postman\r",
									"        //pm.expect(weather.temperature).to.be.within(-20, 50);\r",
									"\r",
									"        pm.expect(object.humidity).to.be.within(1, 100);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Angie",
									"type": "text"
								},
								{
									"key": "surname",
									"value": "Neophytou333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Case 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 7\", function () {\r",
									"\r",
									" \tlet obj = pm.response.json();\r",
									"\r",
									"    \r",
									"    const arrayValues = ['good', 'fair', 'moderate','poor', 'verry poor'];\r",
									"    \r",
									"    for (let object of obj.result) {\r",
									"        pm.expect(typeof object.air_quality).to.be.oneOf(['string']);\r",
									"\r",
									"        pm.expect(object.air_quality).to.contain.oneOf(arrayValues);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Test Case 7.1\", function () {\r",
									" \tlet obj = pm.response.json();\r",
									"    const arrayValues = ['good', 'fair', 'moderate','poor', 'verry poor'];\r",
									"    \r",
									"    for (let object of obj.result) {\r",
									"        let isFound = arrayValues.includes(object.air_quality);\r",
									"        console.log(`${object.air_quality} = ${isFound}`);\r",
									"        pm.expect(isFound).to.be.true;\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Angie",
									"type": "text"
								},
								{
									"key": "surname",
									"value": "Neophytou333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": [
						{
							"name": "Test Case 5 response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "Angie",
											"type": "text"
										},
										{
											"key": "surname",
											"value": "Neophytou333",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/weather/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"weather",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Dec 2024 21:26:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"ChUNKS are logged in console\",\n    \"dataObj\": {\n        \"name\": \"Angie\",\n        \"surname\": \"Neophytou333\"\n    },\n    \"result\": [\n        {\n            \"city\": \"Limassol\",\n            \"temperature\": 17,\n            \"humidity\": 86,\n            \"wind_speed\": 6,\n            \"air_quality\": \"fair\",\n            \"icon\": \"sun\"\n        },\n        {\n            \"city\": \"Paphos\",\n            \"temperature\": 20,\n            \"humidity\": 80,\n            \"wind_speed\": 11,\n            \"air_quality\": \"moderate\",\n            \"icon\": \"sun with clouds\"\n        },\n        {\n            \"city\": \"Larnaka\",\n            \"temperature\": 15,\n            \"humidity\": 84,\n            \"wind_speed\": 4,\n            \"air_quality\": \"moderate\",\n            \"icon\": \"sun\"\n        },\n        {\n            \"city\": \"Nicosia\",\n            \"temperature\": -14,\n            \"humidity\": 84,\n            \"wind_speed\": 12,\n            \"air_quality\": \"fair\",\n            \"icon\": \"sun with clouds\"\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "04_weather_crud",
			"item": [
				{
					"name": "Test CRUD 1 GET ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 1\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"    // console.log(obj.result);\r",
									"    \r",
									"    pm.expect(obj.result)\r",
									"        .to.be.an('array')\r",
									"        .but.not.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Angie",
									"type": "text"
								},
								{
									"key": "surname",
									"value": "Neophytou333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEAN ALL CITIES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/?clean=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							],
							"query": [
								{
									"key": "clean",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE MANY CITIES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// it is safe to unset HERE\r",
									"pm.globals.unset(\"city\"); \r",
									"\r",
									"pm.test(\"Test Case CRUD 1\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"    console.log(`cityCreatedIndex = ${obj.cityCreatedIndex},  cityCreated = ${obj.cityCreated}`);\r",
									"\r",
									"    //pm.globals.set(\"cityCreated\", obj.cityCreated);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let cities = ['Filusa', 'AgiaZoni', 'Peristerona'];\r",
									"\r",
									"let currentIndex = pm.globals.get(\"currentIndex\");\r",
									"\r",
									"console.log(`currentIndex BEFORE = ${currentIndex}`);\r",
									"\r",
									"if (typeof currentIndex === \"undefined\") {\r",
									"    currentIndex = cities.length - 1;\r",
									"}\r",
									"console.log(`currentIndex AFTER = ${currentIndex}`);\r",
									"\r",
									"pm.globals.set(\"city\", cities[currentIndex]);\r",
									"\r",
									"currentIndex = currentIndex - 1;\r",
									"pm.globals.set(\"currentIndex\", currentIndex);\r",
									"// because we make extra call\r",
									"if (currentIndex > -1 ){\r",
									"    //pm.execution.setNextRequest(\"CREATE MANY CITIES\");\r",
									"    pm.execution.setNextRequest(pm.info.requestName);\r",
									"} else {\r",
									"    pm.globals.unset(\"currentIndex\");\r",
									"    // pm.globals.unset(\"city\"); // should UNSET AFTER REQUEST\r",
									"    console.log(`currentIndex UNSET`);\r",
									"    //pm.execution.setNextRequest(null); // WE DONT WANT TO STOP AT ALL\r",
									"\r",
									"    // this is default BEHAVIOUR - next by default\r",
									"    //pm.execution.setNextRequest(\"Test 2 CRUD POST\"); //LET\"S NEXT CASES EXECUTE - OR PUT IN THE END this test case\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "city",
									"value": "{{city}}",
									"type": "text"
								},
								{
									"key": "temperature",
									"value": "-14",
									"type": "text"
								},
								{
									"key": "humidity",
									"value": "84",
									"type": "text"
								},
								{
									"key": "wind_speed",
									"value": "12",
									"type": "text"
								},
								{
									"key": "air_quality",
									"value": "fair",
									"type": "text"
								},
								{
									"key": "icon",
									"value": "sun with clouds",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2 CRUD POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case CRUD 1\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"    console.log(`cityCreatedIndex = ${obj.cityCreatedIndex},  cityCreated = ${obj.cityCreated}`);\r",
									"\r",
									"    pm.globals.set(\"cityCreated\", obj.cityCreated);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "city",
									"value": "Larnaka",
									"type": "text"
								},
								{
									"key": "temperature",
									"value": "-14",
									"type": "text"
								},
								{
									"key": "humidity",
									"value": "84",
									"type": "text"
								},
								{
									"key": "wind_speed",
									"value": "12",
									"type": "text"
								},
								{
									"key": "air_quality",
									"value": "fair",
									"type": "text"
								},
								{
									"key": "icon",
									"value": "sun with clouds",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2 CRUD POST JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case CRUD 1\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"    console.log(`cityCreatedIndex = ${obj.cityCreatedIndex},  cityCreated = ${obj.cityCreated}`);\r",
									"\r",
									"    pm.globals.set(\"cityCreated\", obj.cityCreated);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"Nicosia\",\r\n    \"temperature\": -14,\r\n    \"humidity\": 84,\r\n    \"wind_speed\": 12,\r\n    \"air_quality\": \"fair\",\r\n    \"icon\": \"sun with clouds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2 CRUD PATCH JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case CRUD 1\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"    console.log(\"City UPDATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"city\": \"Nicosia2\",\r\n    \"temperature\": -14,\r\n    \"humidity\": 84,\r\n    \"wind_speed\": 12,\r\n    \"air_quality\": \"fair\",\r\n    \"icon\": \"sun with clouds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/?city={{cityCreated}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							],
							"query": [
								{
									"key": "city",
									"value": "{{cityCreated}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "04_weather_crud MULTIPLE",
			"item": [
				{
					"name": "CLEAN ALL CITIES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/?clean=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							],
							"query": [
								{
									"key": "clean",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE MANY CITIES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// it is safe to unset HERE\r",
									"pm.globals.unset(\"city\"); \r",
									"\r",
									"pm.test(\"Test Case CRUD 1\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"    console.log(`cityCreatedIndex = ${obj.cityCreatedIndex},  cityCreated = ${obj.cityCreated}`);\r",
									"\r",
									"    //pm.globals.set(\"cityCreated\", obj.cityCreated);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let cities = ['Filusa', 'AgiaZoni', 'Peristerona'];\r",
									"\r",
									"let currentIndex = pm.globals.get(\"currentIndex\");\r",
									"\r",
									"console.log(`currentIndex BEFORE = ${currentIndex}`);\r",
									"\r",
									"if (typeof currentIndex === \"undefined\") {\r",
									"    currentIndex = cities.length - 1;\r",
									"}\r",
									"console.log(`currentIndex = ${currentIndex} and city = ${cities[currentIndex]}`);\r",
									"//Here we set global variable that we use in req.body pre-request script we should change this variable to some city e.g Filousa\r",
									"pm.globals.set(\"city\", cities[currentIndex]);\r",
									"\r",
									"currentIndex = currentIndex - 1;\r",
									"pm.globals.set(\"currentIndex\", currentIndex);\r",
									"// because we make extra call\r",
									"if (currentIndex > -1 ){\r",
									"    //pm.execution.setNextRequest(\"CREATE MANY CITIES\");\r",
									"    pm.execution.setNextRequest(pm.info.requestName); // Here we say: next script repeat the same but with new index.\r",
									"} else {\r",
									"    // here means it was the last city and the next script will be executed if it exists if we run folder. (GET ALL CITIES)\r",
									"    pm.globals.unset(\"currentIndex\");\r",
									"    // pm.globals.unset(\"city\"); // should UNSET AFTER REQUEST\r",
									"    console.log(`currentIndex UNSET`);\r",
									"    //pm.execution.setNextRequest(null); // WE DONT WANT TO STOP AT ALL\r",
									"\r",
									"    // this is default BEHAVIOUR - next by default\r",
									"    //pm.execution.setNextRequest(\"Test 2 CRUD POST\"); //LET\"S NEXT CASES EXECUTE - OR PUT IN THE END this test case\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "city",
									"value": "{{city}}",
									"type": "text"
								},
								{
									"key": "temperature",
									"value": "-14",
									"type": "text"
								},
								{
									"key": "humidity",
									"value": "84",
									"type": "text"
								},
								{
									"key": "wind_speed",
									"value": "12",
									"type": "text"
								},
								{
									"key": "air_quality",
									"value": "fair",
									"type": "text"
								},
								{
									"key": "icon",
									"value": "sun with clouds",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ALL CITIES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test Case 1\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"    // console.log(obj.result);\r",
									"    \r",
									"    pm.expect(obj.result)\r",
									"        .to.be.an('array')\r",
									"        .but.not.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Angie",
									"type": "text"
								},
								{
									"key": "surname",
									"value": "Neophytou333",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SIMPLE MULTIPLE",
			"item": [
				{
					"name": "SIMPLE MULTIPLE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let counter = pm.globals.get(\"counter\");\r",
									"\r",
									"console.log(`counter = ${counter}`);\r",
									"\r",
									"if (typeof counter === \"undefined\") {\r",
									"    counter = 1;\r",
									"}\r",
									"\r",
									"if (counter >= 10 ) {\r",
									"    pm.globals.unset(\"counter\");\r",
									"    pm.execution.setNextRequest(null); // STOP ITERATION\r",
									"} else {\r",
									"    counter++;\r",
									"    pm.globals.set(\"counter\", counter);\r",
									"    pm.execution.setNextRequest(pm.info.requestName); // next script execute myself.\r",
									"}\r",
									"\r",
									"// Code bellow wont work because this variable will allways be reset to 0 in every new request.\r",
									"// That's why we use a global variable like above.\r",
									"// var i = 0;\r",
									"// while (counter1 < 10) {\r",
									"//     console.log(`counter1= ${counter1}`);\r",
									"//     counter1++;\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/weather/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"weather",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "05_cookie",
			"item": [
				{
					"name": "signup",
					"item": [
						{
							"name": "signup - Negative test case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test sign up\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    \r",
											"    let obj = pm.response.json();\r",
											"\r",
											"    pm.expect(obj.message).eq(\"User already exists!\");\r",
											"    pm.expect(obj.success).eq(false);\r",
											"\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "Elena",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "Paparizou",
											"type": "text"
										},
										{
											"key": "username",
											"value": "Elena",
											"type": "text"
										},
										{
											"key": "password",
											"value": "5547",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test signup\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"        let obj = pm.response.json();\r",
											"\r",
											"    pm.expect(obj.message).eq(\"You have successfully signed up\");\r",
											"    pm.expect(obj.success).eq(true);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "Angelique",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "Neophytou",
											"type": "text"
										},
										{
											"key": "username",
											"value": "angie",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1234",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"signup"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "login",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();\r",
											"jar.set(\"localhost\", \"session-id-ROMA\", \"abc123\", (error, cookie) => {\r",
											"  if (error) {\r",
											"    console.error(`An error occurred: ${error}`);\r",
											"  } else {\r",
											"    console.log(`Cookie saved: ${cookie}`);\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(JSON.stringify(pm.cookies));\r",
											"\r",
											"console.log(JSON.stringify(pm.cookies.get('sess_id')));\r",
											"\r",
											"console.log(pm.cookies.has('sess_id'));\r",
											"\r",
											"\r",
											"/*\r",
											"const jar = pm.cookies.jar();\r",
											"jar.set(\"localhost\", \"session-id-ROMA\", \"abc123\", (error, cookie) => {\r",
											"  if (error) {\r",
											"    console.error(`An error occurred: ${error}`);\r",
											"  } else {\r",
											"    console.log(`Cookie saved: ${cookie}`);\r",
											"  }\r",
											"});\r",
											"*/\r",
											"\r",
											"pm.test(\"Cookies_Check has\", function(){\r",
											"    pm.expect(pm.cookies.has('sess_id')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Cookies_Check not empty\", function(){\r",
											"    console.log(pm.cookies.get('sess_id'));\r",
											"    pm.expect(pm.cookies.get('sess_id')).to.not.eq(undefined);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "angie",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1234",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login - Negative test case",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();\r",
											"jar.set(\"localhost\", \"session-id-ROMA\", \"abc123\", (error, cookie) => {\r",
											"  if (error) {\r",
											"    console.error(`An error occurred: ${error}`);\r",
											"  } else {\r",
											"    console.log(`Cookie saved: ${cookie}`);\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(JSON.stringify(pm.cookies));\r",
											"\r",
											"console.log(JSON.stringify(pm.cookies.get('sess_id')));\r",
											"\r",
											"console.log(pm.cookies.has('sess_id'));\r",
											"\r",
											"\r",
											"/*\r",
											"const jar = pm.cookies.jar();\r",
											"jar.set(\"localhost\", \"session-id-ROMA\", \"abc123\", (error, cookie) => {\r",
											"  if (error) {\r",
											"    console.error(`An error occurred: ${error}`);\r",
											"  } else {\r",
											"    console.log(`Cookie saved: ${cookie}`);\r",
											"  }\r",
											"});\r",
											"*/\r",
											"\r",
											"pm.test(\"Cookies_Check\", function(){\r",
											"    pm.expect(pm.cookies.has('sess_id')).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Cookies_Check empty\", function(){\r",
											"    console.log(pm.cookies.get('sess_id'));\r",
											"    pm.expect(pm.cookies.get('sess_id')).eq(undefined);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "Maria",
											"type": "text"
										},
										{
											"key": "password",
											"value": "1145",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout - Negative test case",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cookies_Check is empty\", function(){\r",
											"    console.log(pm.cookies.get('sess_id'));\r",
											"    pm.expect(pm.cookies.get('sess_id')).to.eq('undefined');\r",
											"\r",
											"    pm.response.to.have.status(400);\r",
											"    \r",
											"    let obj = pm.response.json();\r",
											"\r",
											"    pm.expect(obj.message).eq(\"You should be logged in\");\r",
											"    pm.expect(obj.success).eq(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/api/logout",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cookies_Check is not empty\", function(){\r",
											"    console.log(pm.cookies.get('sess_id'));\r",
											"     pm.expect(pm.cookies.has('sess_id')).to.be.true;\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    let obj = pm.response.json();\r",
											"\r",
											"    pm.expect(obj.message).eq(\"You have successfully logged out.\");\r",
											"    pm.expect(obj.success).eq(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/api/logout",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  pm.test(\"Hello\", function(){\r",
									"//     pm.expect(123).to.eq(123);\r",
									"// });\r",
									"\r",
									"//  pm.test(\"Hello2\", function(){\r",
									"//     pm.expect(\"angie\").to.eq(\"angie\");\r",
									"// });\r",
									"\r",
									"// pm.test([\"Text is present\"], function(){\r",
									"// \tpm.expect(['Java', 'Postman']).to.include('Postman')\r",
									"// });\r",
									"\r",
									"pm.test(\"Response Text\", function () {\r",
									"    console.log(pm.response.text());\r",
									"    pm.response.to.have.header(\"Content-Type\",\"text/html; charset=UTF-8\");\r",
									"\tpm.expect(pm.response.text()).to.include(\"Angie\")\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/hello",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"hello"
							]
						}
					},
					"response": []
				},
				{
					"name": "homepage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cookies_Check\", function(){\r",
									"    console.log(pm.cookies.get('sess_id'));\r",
									"    pm.expect(pm.cookies.has('sess_id')).to.be.true;\r",
									"    //pm.expect(pm.cookies.has('sess_id')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Test homepage\", function(){\r",
									"    \r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let obj = pm.response.json();\r",
									"\r",
									"    pm.expect(obj.message).eq(\"Home page\");\r",
									"    pm.expect(obj.user).to.be.an('object');\r",
									"\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/homepage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"homepage"
							]
						}
					},
					"response": []
				},
				{
					"name": "homepage - Negative test case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cookies_Check\", function(){\r",
									"    console.log(pm.cookies.get('sess_id'));\r",
									"    pm.expect(pm.cookies.get('sess_id')).to.be.eq('undefined');\r",
									"    //pm.expect(pm.cookies.has('sess_id')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Test homepage\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"    \r",
									"    let obj = pm.response.json();\r",
									"\r",
									"    pm.expect(obj.message).eq(\"Not authenticated\");\r",
									"    pm.expect(obj.success).eq(false);\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/homepage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"homepage"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete - Negative test case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cookies_Check is empty\", function(){\r",
									"    console.log(pm.cookies.get('sess_id'));\r",
									"    pm.expect(pm.cookies.get('sess_id')).to.eq(undefined);\r",
									"\r",
									"    pm.response.to.have.status(400);\r",
									"    \r",
									"    let obj = pm.response.json();\r",
									"\r",
									"    pm.expect(obj.message).eq(\"You should be logged in\");\r",
									"    pm.expect(obj.success).eq(false);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/delete",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cookies_Check is empty\", function(){\r",
									"    console.log(pm.cookies.get('sess_id'));\r",
									"    pm.expect(pm.cookies.get('sess_id')).to.eq('undefined');\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    let obj = pm.response.json();\r",
									"\r",
									"    pm.expect(obj.message).eq(\"user has been successfully deleted.\");\r",
									"    pm.expect(obj.success).eq(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/delete",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "06_file_server",
			"item": [
				{
					"name": "001_simple_server",
					"item": [
						{
							"name": "API_weather_LIMASSOL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"API weather Limassol\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"\r",
											"    let obj = pm.response.json();\r",
											"\r",
											"    pm.expect(obj).to.be.an('object');\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/weather/limassol",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"weather",
										"limassol"
									]
								}
							},
							"response": []
						},
						{
							"name": "not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"API weather Limassol\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"\r",
											"    let obj = pm.response.json();\r",
											"\r",
											"    pm.expect(obj).to.be.an('object');\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/hygyugyuy",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"hygyugyuy"
									]
								}
							},
							"response": []
						},
						{
							"name": "file js",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"API weather Limassol\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"\r",
											"    let obj = pm.response.json();\r",
											"\r",
											"    pm.expect(obj).to.be.an('object');\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/application.js",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"application.js"
									]
								}
							},
							"response": []
						},
						{
							"name": "file photo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"API weather Limassol\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"\r",
											"    let obj = pm.response.json();\r",
											"\r",
											"    pm.expect(obj).to.be.an('object');\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/ginger.png",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"ginger.png"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "09_file_upload",
			"item": [
				{
					"name": "01_simple_upload",
					"item": [
						{
							"name": "upload file",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "filetoupload",
											"type": "file",
											"src": "angie3.jpg"
										}
									]
								},
								"url": {
									"raw": "http://localhost:8080/fileupload",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"fileupload"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "cityCreated",
			"value": ""
		}
	]
}